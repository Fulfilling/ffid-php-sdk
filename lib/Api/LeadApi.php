<?php
/**
 * LeadApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API FFID
 *
 * Documentação de chamadas à API pública FFID.  Você pode encontrar mais sobre o tratamento dos dados no seu [dashboard](https://d.ffid.com.br). Para utilizar esta API é preciso obter uma chave e um segredo (`api_key`, `api_secret`).
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.32
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * LeadApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation leadGet
     *
     * @param  string $lead_id Número interno (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Lead
     */
    public function leadGet($lead_id)
    {
        list($response) = $this->leadGetWithHttpInfo($lead_id);
        return $response;
    }

    /**
     * Operation leadGetWithHttpInfo
     *
     * @param  string $lead_id Número interno (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Lead, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadGetWithHttpInfo($lead_id)
    {
        $returnType = '\Swagger\Client\Model\Lead';
        $request = $this->leadGetRequest($lead_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Lead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadGetAsync
     *
     * 
     *
     * @param  string $lead_id Número interno (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadGetAsync($lead_id)
    {
        return $this->leadGetAsyncWithHttpInfo($lead_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $lead_id Número interno (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadGetAsyncWithHttpInfo($lead_id)
    {
        $returnType = '\Swagger\Client\Model\Lead';
        $request = $this->leadGetRequest($lead_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadGet'
     *
     * @param  string $lead_id Número interno (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadGetRequest($lead_id)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadGet'
            );
        }

        $resourcePath = '/lead';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['lead_id'] = ObjectSerializer::toQueryValue($lead_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadPost
     *
     * @param  int $id Identificação do Contato (required)
     * @param  string $name Nome do contato (required)
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $email Endereço de e-mail do Contato (required)
     * @param  \Swagger\Client\Model\LeadBody $body body (optional)
     * @param  string $origin Identificação do ponto de origem do contato (optional)
     * @param  string $product_url URL de página de Produto (optional)
     * @param  string $product_id Identificação de Produto (optional)
     * @param  string $product_type Categoria principal de produto ou tipo de transação (optional)
     * @param  string $product_subtype Sub-categoria ou sub-tipo de produto (optional)
     * @param  string $campaign Id da campanha vinculada (optional)
     * @param  string $utm_source Origem de campanha (optional)
     * @param  string $utm_medium Meio de campanha (optional)
     * @param  string $utm_campaign Nome de campanha (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Lead
     */
    public function leadPost($id, $name, $telephone, $email, $body = null, $origin = null, $product_url = null, $product_id = null, $product_type = null, $product_subtype = null, $campaign = null, $utm_source = null, $utm_medium = null, $utm_campaign = null)
    {
        list($response) = $this->leadPostWithHttpInfo($id, $name, $telephone, $email, $body, $origin, $product_url, $product_id, $product_type, $product_subtype, $campaign, $utm_source, $utm_medium, $utm_campaign);
        return $response;
    }

    /**
     * Operation leadPostWithHttpInfo
     *
     * @param  int $id Identificação do Contato (required)
     * @param  string $name Nome do contato (required)
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $email Endereço de e-mail do Contato (required)
     * @param  \Swagger\Client\Model\LeadBody $body (optional)
     * @param  string $origin Identificação do ponto de origem do contato (optional)
     * @param  string $product_url URL de página de Produto (optional)
     * @param  string $product_id Identificação de Produto (optional)
     * @param  string $product_type Categoria principal de produto ou tipo de transação (optional)
     * @param  string $product_subtype Sub-categoria ou sub-tipo de produto (optional)
     * @param  string $campaign Id da campanha vinculada (optional)
     * @param  string $utm_source Origem de campanha (optional)
     * @param  string $utm_medium Meio de campanha (optional)
     * @param  string $utm_campaign Nome de campanha (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Lead, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadPostWithHttpInfo($id, $name, $telephone, $email, $body = null, $origin = null, $product_url = null, $product_id = null, $product_type = null, $product_subtype = null, $campaign = null, $utm_source = null, $utm_medium = null, $utm_campaign = null)
    {
        $returnType = '\Swagger\Client\Model\Lead';
        $request = $this->leadPostRequest($id, $name, $telephone, $email, $body, $origin, $product_url, $product_id, $product_type, $product_subtype, $campaign, $utm_source, $utm_medium, $utm_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Lead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leadPostAsync
     *
     * 
     *
     * @param  int $id Identificação do Contato (required)
     * @param  string $name Nome do contato (required)
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $email Endereço de e-mail do Contato (required)
     * @param  \Swagger\Client\Model\LeadBody $body (optional)
     * @param  string $origin Identificação do ponto de origem do contato (optional)
     * @param  string $product_url URL de página de Produto (optional)
     * @param  string $product_id Identificação de Produto (optional)
     * @param  string $product_type Categoria principal de produto ou tipo de transação (optional)
     * @param  string $product_subtype Sub-categoria ou sub-tipo de produto (optional)
     * @param  string $campaign Id da campanha vinculada (optional)
     * @param  string $utm_source Origem de campanha (optional)
     * @param  string $utm_medium Meio de campanha (optional)
     * @param  string $utm_campaign Nome de campanha (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadPostAsync($id, $name, $telephone, $email, $body = null, $origin = null, $product_url = null, $product_id = null, $product_type = null, $product_subtype = null, $campaign = null, $utm_source = null, $utm_medium = null, $utm_campaign = null)
    {
        return $this->leadPostAsyncWithHttpInfo($id, $name, $telephone, $email, $body, $origin, $product_url, $product_id, $product_type, $product_subtype, $campaign, $utm_source, $utm_medium, $utm_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $id Identificação do Contato (required)
     * @param  string $name Nome do contato (required)
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $email Endereço de e-mail do Contato (required)
     * @param  \Swagger\Client\Model\LeadBody $body (optional)
     * @param  string $origin Identificação do ponto de origem do contato (optional)
     * @param  string $product_url URL de página de Produto (optional)
     * @param  string $product_id Identificação de Produto (optional)
     * @param  string $product_type Categoria principal de produto ou tipo de transação (optional)
     * @param  string $product_subtype Sub-categoria ou sub-tipo de produto (optional)
     * @param  string $campaign Id da campanha vinculada (optional)
     * @param  string $utm_source Origem de campanha (optional)
     * @param  string $utm_medium Meio de campanha (optional)
     * @param  string $utm_campaign Nome de campanha (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadPostAsyncWithHttpInfo($id, $name, $telephone, $email, $body = null, $origin = null, $product_url = null, $product_id = null, $product_type = null, $product_subtype = null, $campaign = null, $utm_source = null, $utm_medium = null, $utm_campaign = null)
    {
        $returnType = '\Swagger\Client\Model\Lead';
        $request = $this->leadPostRequest($id, $name, $telephone, $email, $body, $origin, $product_url, $product_id, $product_type, $product_subtype, $campaign, $utm_source, $utm_medium, $utm_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadPost'
     *
     * @param  int $id Identificação do Contato (required)
     * @param  string $name Nome do contato (required)
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $email Endereço de e-mail do Contato (required)
     * @param  \Swagger\Client\Model\LeadBody $body (optional)
     * @param  string $origin Identificação do ponto de origem do contato (optional)
     * @param  string $product_url URL de página de Produto (optional)
     * @param  string $product_id Identificação de Produto (optional)
     * @param  string $product_type Categoria principal de produto ou tipo de transação (optional)
     * @param  string $product_subtype Sub-categoria ou sub-tipo de produto (optional)
     * @param  string $campaign Id da campanha vinculada (optional)
     * @param  string $utm_source Origem de campanha (optional)
     * @param  string $utm_medium Meio de campanha (optional)
     * @param  string $utm_campaign Nome de campanha (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadPostRequest($id, $name, $telephone, $email, $body = null, $origin = null, $product_url = null, $product_id = null, $product_type = null, $product_subtype = null, $campaign = null, $utm_source = null, $utm_medium = null, $utm_campaign = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling leadPost'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling leadPost'
            );
        }
        // verify the required parameter 'telephone' is set
        if ($telephone === null || (is_array($telephone) && count($telephone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telephone when calling leadPost'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling leadPost'
            );
        }

        $resourcePath = '/lead';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($telephone !== null) {
            $queryParams['telephone'] = ObjectSerializer::toQueryValue($telephone, null);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = ObjectSerializer::toQueryValue($origin, null);
        }
        // query params
        if ($product_url !== null) {
            $queryParams['product_url'] = ObjectSerializer::toQueryValue($product_url, null);
        }
        // query params
        if ($product_id !== null) {
            $queryParams['product_id'] = ObjectSerializer::toQueryValue($product_id, null);
        }
        // query params
        if ($product_type !== null) {
            $queryParams['product_type'] = ObjectSerializer::toQueryValue($product_type, null);
        }
        // query params
        if ($product_subtype !== null) {
            $queryParams['product_subtype'] = ObjectSerializer::toQueryValue($product_subtype, null);
        }
        // query params
        if ($campaign !== null) {
            $queryParams['campaign'] = ObjectSerializer::toQueryValue($campaign, null);
        }
        // query params
        if ($utm_source !== null) {
            $queryParams['utm_source'] = ObjectSerializer::toQueryValue($utm_source, null);
        }
        // query params
        if ($utm_medium !== null) {
            $queryParams['utm_medium'] = ObjectSerializer::toQueryValue($utm_medium, null);
        }
        // query params
        if ($utm_campaign !== null) {
            $queryParams['utm_campaign'] = ObjectSerializer::toQueryValue($utm_campaign, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leadResponsiblePost
     *
     * @param  string $lead_id Id do lead no FFID (required)
     * @param  string $responsible_for_customer_service_name Nome da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_email E-mail da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_telephone Telefone da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_avatar Foto da pessoa responsável pelo lead (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leadResponsiblePost($lead_id, $responsible_for_customer_service_name, $responsible_for_customer_service_email, $responsible_for_customer_service_telephone, $responsible_for_customer_service_avatar = null)
    {
        $this->leadResponsiblePostWithHttpInfo($lead_id, $responsible_for_customer_service_name, $responsible_for_customer_service_email, $responsible_for_customer_service_telephone, $responsible_for_customer_service_avatar);
    }

    /**
     * Operation leadResponsiblePostWithHttpInfo
     *
     * @param  string $lead_id Id do lead no FFID (required)
     * @param  string $responsible_for_customer_service_name Nome da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_email E-mail da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_telephone Telefone da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_avatar Foto da pessoa responsável pelo lead (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadResponsiblePostWithHttpInfo($lead_id, $responsible_for_customer_service_name, $responsible_for_customer_service_email, $responsible_for_customer_service_telephone, $responsible_for_customer_service_avatar = null)
    {
        $returnType = '';
        $request = $this->leadResponsiblePostRequest($lead_id, $responsible_for_customer_service_name, $responsible_for_customer_service_email, $responsible_for_customer_service_telephone, $responsible_for_customer_service_avatar);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leadResponsiblePostAsync
     *
     * 
     *
     * @param  string $lead_id Id do lead no FFID (required)
     * @param  string $responsible_for_customer_service_name Nome da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_email E-mail da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_telephone Telefone da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_avatar Foto da pessoa responsável pelo lead (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadResponsiblePostAsync($lead_id, $responsible_for_customer_service_name, $responsible_for_customer_service_email, $responsible_for_customer_service_telephone, $responsible_for_customer_service_avatar = null)
    {
        return $this->leadResponsiblePostAsyncWithHttpInfo($lead_id, $responsible_for_customer_service_name, $responsible_for_customer_service_email, $responsible_for_customer_service_telephone, $responsible_for_customer_service_avatar)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leadResponsiblePostAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $lead_id Id do lead no FFID (required)
     * @param  string $responsible_for_customer_service_name Nome da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_email E-mail da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_telephone Telefone da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_avatar Foto da pessoa responsável pelo lead (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leadResponsiblePostAsyncWithHttpInfo($lead_id, $responsible_for_customer_service_name, $responsible_for_customer_service_email, $responsible_for_customer_service_telephone, $responsible_for_customer_service_avatar = null)
    {
        $returnType = '';
        $request = $this->leadResponsiblePostRequest($lead_id, $responsible_for_customer_service_name, $responsible_for_customer_service_email, $responsible_for_customer_service_telephone, $responsible_for_customer_service_avatar);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leadResponsiblePost'
     *
     * @param  string $lead_id Id do lead no FFID (required)
     * @param  string $responsible_for_customer_service_name Nome da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_email E-mail da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_telephone Telefone da pessoa responsável pelo lead (required)
     * @param  string $responsible_for_customer_service_avatar Foto da pessoa responsável pelo lead (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function leadResponsiblePostRequest($lead_id, $responsible_for_customer_service_name, $responsible_for_customer_service_email, $responsible_for_customer_service_telephone, $responsible_for_customer_service_avatar = null)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null || (is_array($lead_id) && count($lead_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling leadResponsiblePost'
            );
        }
        // verify the required parameter 'responsible_for_customer_service_name' is set
        if ($responsible_for_customer_service_name === null || (is_array($responsible_for_customer_service_name) && count($responsible_for_customer_service_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $responsible_for_customer_service_name when calling leadResponsiblePost'
            );
        }
        // verify the required parameter 'responsible_for_customer_service_email' is set
        if ($responsible_for_customer_service_email === null || (is_array($responsible_for_customer_service_email) && count($responsible_for_customer_service_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $responsible_for_customer_service_email when calling leadResponsiblePost'
            );
        }
        // verify the required parameter 'responsible_for_customer_service_telephone' is set
        if ($responsible_for_customer_service_telephone === null || (is_array($responsible_for_customer_service_telephone) && count($responsible_for_customer_service_telephone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $responsible_for_customer_service_telephone when calling leadResponsiblePost'
            );
        }

        $resourcePath = '/lead/responsible';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lead_id !== null) {
            $queryParams['lead_id'] = ObjectSerializer::toQueryValue($lead_id, null);
        }
        // query params
        if ($responsible_for_customer_service_name !== null) {
            $queryParams['responsible_for_customer_service_name'] = ObjectSerializer::toQueryValue($responsible_for_customer_service_name, null);
        }
        // query params
        if ($responsible_for_customer_service_email !== null) {
            $queryParams['responsible_for_customer_service_email'] = ObjectSerializer::toQueryValue($responsible_for_customer_service_email, null);
        }
        // query params
        if ($responsible_for_customer_service_telephone !== null) {
            $queryParams['responsible_for_customer_service_telephone'] = ObjectSerializer::toQueryValue($responsible_for_customer_service_telephone, null);
        }
        // query params
        if ($responsible_for_customer_service_avatar !== null) {
            $queryParams['responsible_for_customer_service_avatar'] = ObjectSerializer::toQueryValue($responsible_for_customer_service_avatar, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
