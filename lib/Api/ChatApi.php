<?php
/**
 * ChatApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API FFID
 *
 * Documentação de chamadas à API pública FFID.  Você pode encontrar mais sobre o tratamento dos dados no seu [dashboard](https://d.ffid.com.br). Para utilizar esta API é preciso obter uma chave e um segredo (`api_key`, `api_secret`).
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.32
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ChatApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChatApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation chatChatsGet
     *
     * @param  int $page Página de resultados (optional)
     * @param  string $id Identificação da Conversa (optional)
     * @param  string $q Query - texto para busca genérica (optional)
     * @param  string $user_id Usuário a quem a conversa está atribuída (optional)
     * @param  string $view Escopo de visualização (&#x27;all&#x27;, &#x27;mine&#x27;, &#x27;unassigned&#x27;) (optional)
     * @param  string $tag Identificação da Etiqueta (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Chats
     */
    public function chatChatsGet($page = null, $id = null, $q = null, $user_id = null, $view = null, $tag = null)
    {
        list($response) = $this->chatChatsGetWithHttpInfo($page, $id, $q, $user_id, $view, $tag);
        return $response;
    }

    /**
     * Operation chatChatsGetWithHttpInfo
     *
     * @param  int $page Página de resultados (optional)
     * @param  string $id Identificação da Conversa (optional)
     * @param  string $q Query - texto para busca genérica (optional)
     * @param  string $user_id Usuário a quem a conversa está atribuída (optional)
     * @param  string $view Escopo de visualização (&#x27;all&#x27;, &#x27;mine&#x27;, &#x27;unassigned&#x27;) (optional)
     * @param  string $tag Identificação da Etiqueta (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Chats, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatChatsGetWithHttpInfo($page = null, $id = null, $q = null, $user_id = null, $view = null, $tag = null)
    {
        $returnType = '\Swagger\Client\Model\Chats';
        $request = $this->chatChatsGetRequest($page, $id, $q, $user_id, $view, $tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Chats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatChatsGetAsync
     *
     * 
     *
     * @param  int $page Página de resultados (optional)
     * @param  string $id Identificação da Conversa (optional)
     * @param  string $q Query - texto para busca genérica (optional)
     * @param  string $user_id Usuário a quem a conversa está atribuída (optional)
     * @param  string $view Escopo de visualização (&#x27;all&#x27;, &#x27;mine&#x27;, &#x27;unassigned&#x27;) (optional)
     * @param  string $tag Identificação da Etiqueta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatChatsGetAsync($page = null, $id = null, $q = null, $user_id = null, $view = null, $tag = null)
    {
        return $this->chatChatsGetAsyncWithHttpInfo($page, $id, $q, $user_id, $view, $tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatChatsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $page Página de resultados (optional)
     * @param  string $id Identificação da Conversa (optional)
     * @param  string $q Query - texto para busca genérica (optional)
     * @param  string $user_id Usuário a quem a conversa está atribuída (optional)
     * @param  string $view Escopo de visualização (&#x27;all&#x27;, &#x27;mine&#x27;, &#x27;unassigned&#x27;) (optional)
     * @param  string $tag Identificação da Etiqueta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatChatsGetAsyncWithHttpInfo($page = null, $id = null, $q = null, $user_id = null, $view = null, $tag = null)
    {
        $returnType = '\Swagger\Client\Model\Chats';
        $request = $this->chatChatsGetRequest($page, $id, $q, $user_id, $view, $tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatChatsGet'
     *
     * @param  int $page Página de resultados (optional)
     * @param  string $id Identificação da Conversa (optional)
     * @param  string $q Query - texto para busca genérica (optional)
     * @param  string $user_id Usuário a quem a conversa está atribuída (optional)
     * @param  string $view Escopo de visualização (&#x27;all&#x27;, &#x27;mine&#x27;, &#x27;unassigned&#x27;) (optional)
     * @param  string $tag Identificação da Etiqueta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatChatsGetRequest($page = null, $id = null, $q = null, $user_id = null, $view = null, $tag = null)
    {

        $resourcePath = '/chat/chats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = ObjectSerializer::toQueryValue($user_id, null);
        }
        // query params
        if ($view !== null) {
            $queryParams['view'] = ObjectSerializer::toQueryValue($view, null);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatMessagePost
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $date Data agendada para envio da mensagem (optional)
     * @param  string $message Conteúdo de texto da mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     * @param  string $media URL de arquivo a anexar (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Chat
     */
    public function chatMessagePost($telephone, $date = null, $message = null, $template_id = null, $media = null)
    {
        list($response) = $this->chatMessagePostWithHttpInfo($telephone, $date, $message, $template_id, $media);
        return $response;
    }

    /**
     * Operation chatMessagePostWithHttpInfo
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $date Data agendada para envio da mensagem (optional)
     * @param  string $message Conteúdo de texto da mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     * @param  string $media URL de arquivo a anexar (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Chat, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatMessagePostWithHttpInfo($telephone, $date = null, $message = null, $template_id = null, $media = null)
    {
        $returnType = '\Swagger\Client\Model\Chat';
        $request = $this->chatMessagePostRequest($telephone, $date, $message, $template_id, $media);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Chat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatMessagePostAsync
     *
     * 
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $date Data agendada para envio da mensagem (optional)
     * @param  string $message Conteúdo de texto da mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     * @param  string $media URL de arquivo a anexar (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatMessagePostAsync($telephone, $date = null, $message = null, $template_id = null, $media = null)
    {
        return $this->chatMessagePostAsyncWithHttpInfo($telephone, $date, $message, $template_id, $media)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatMessagePostAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $date Data agendada para envio da mensagem (optional)
     * @param  string $message Conteúdo de texto da mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     * @param  string $media URL de arquivo a anexar (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatMessagePostAsyncWithHttpInfo($telephone, $date = null, $message = null, $template_id = null, $media = null)
    {
        $returnType = '\Swagger\Client\Model\Chat';
        $request = $this->chatMessagePostRequest($telephone, $date, $message, $template_id, $media);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatMessagePost'
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $date Data agendada para envio da mensagem (optional)
     * @param  string $message Conteúdo de texto da mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     * @param  string $media URL de arquivo a anexar (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatMessagePostRequest($telephone, $date = null, $message = null, $template_id = null, $media = null)
    {
        // verify the required parameter 'telephone' is set
        if ($telephone === null || (is_array($telephone) && count($telephone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telephone when calling chatMessagePost'
            );
        }

        $resourcePath = '/chat/message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($telephone !== null) {
            $queryParams['telephone'] = ObjectSerializer::toQueryValue($telephone, null);
        }
        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date, null);
        }
        // query params
        if ($message !== null) {
            $queryParams['message'] = ObjectSerializer::toQueryValue($message, null);
        }
        // query params
        if ($template_id !== null) {
            $queryParams['template_id'] = ObjectSerializer::toQueryValue($template_id, null);
        }
        // query params
        if ($media !== null) {
            $queryParams['media'] = ObjectSerializer::toQueryValue($media, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatMessagesGet
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Chat
     */
    public function chatMessagesGet($telephone)
    {
        list($response) = $this->chatMessagesGetWithHttpInfo($telephone);
        return $response;
    }

    /**
     * Operation chatMessagesGetWithHttpInfo
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Chat, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatMessagesGetWithHttpInfo($telephone)
    {
        $returnType = '\Swagger\Client\Model\Chat';
        $request = $this->chatMessagesGetRequest($telephone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Chat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatMessagesGetAsync
     *
     * 
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatMessagesGetAsync($telephone)
    {
        return $this->chatMessagesGetAsyncWithHttpInfo($telephone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatMessagesGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatMessagesGetAsyncWithHttpInfo($telephone)
    {
        $returnType = '\Swagger\Client\Model\Chat';
        $request = $this->chatMessagesGetRequest($telephone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatMessagesGet'
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatMessagesGetRequest($telephone)
    {
        // verify the required parameter 'telephone' is set
        if ($telephone === null || (is_array($telephone) && count($telephone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telephone when calling chatMessagesGet'
            );
        }

        $resourcePath = '/chat/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($telephone !== null) {
            $queryParams['telephone'] = ObjectSerializer::toQueryValue($telephone, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailPost
     *
     * @param  string $email email (required)
     * @param  string $message_title Titulo do email (optional)
     * @param  string $message Conteúdo de texto da mensagem, deve ser transformado em BASE64 (optional)
     * @param  string $sender_id Identificação do email que vai enviar a mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Chat
     */
    public function emailPost($email, $message_title = null, $message = null, $sender_id = null, $template_id = null)
    {
        list($response) = $this->emailPostWithHttpInfo($email, $message_title, $message, $sender_id, $template_id);
        return $response;
    }

    /**
     * Operation emailPostWithHttpInfo
     *
     * @param  string $email email (required)
     * @param  string $message_title Titulo do email (optional)
     * @param  string $message Conteúdo de texto da mensagem, deve ser transformado em BASE64 (optional)
     * @param  string $sender_id Identificação do email que vai enviar a mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Chat, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailPostWithHttpInfo($email, $message_title = null, $message = null, $sender_id = null, $template_id = null)
    {
        $returnType = '\Swagger\Client\Model\Chat';
        $request = $this->emailPostRequest($email, $message_title, $message, $sender_id, $template_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Chat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailPostAsync
     *
     * 
     *
     * @param  string $email email (required)
     * @param  string $message_title Titulo do email (optional)
     * @param  string $message Conteúdo de texto da mensagem, deve ser transformado em BASE64 (optional)
     * @param  string $sender_id Identificação do email que vai enviar a mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailPostAsync($email, $message_title = null, $message = null, $sender_id = null, $template_id = null)
    {
        return $this->emailPostAsyncWithHttpInfo($email, $message_title, $message, $sender_id, $template_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $email email (required)
     * @param  string $message_title Titulo do email (optional)
     * @param  string $message Conteúdo de texto da mensagem, deve ser transformado em BASE64 (optional)
     * @param  string $sender_id Identificação do email que vai enviar a mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailPostAsyncWithHttpInfo($email, $message_title = null, $message = null, $sender_id = null, $template_id = null)
    {
        $returnType = '\Swagger\Client\Model\Chat';
        $request = $this->emailPostRequest($email, $message_title, $message, $sender_id, $template_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailPost'
     *
     * @param  string $email email (required)
     * @param  string $message_title Titulo do email (optional)
     * @param  string $message Conteúdo de texto da mensagem, deve ser transformado em BASE64 (optional)
     * @param  string $sender_id Identificação do email que vai enviar a mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailPostRequest($email, $message_title = null, $message = null, $sender_id = null, $template_id = null)
    {
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling emailPost'
            );
        }

        $resourcePath = '/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($message_title !== null) {
            $queryParams['message_title'] = ObjectSerializer::toQueryValue($message_title, null);
        }
        // query params
        if ($message !== null) {
            $queryParams['message'] = ObjectSerializer::toQueryValue($message, null);
        }
        // query params
        if ($sender_id !== null) {
            $queryParams['sender_id'] = ObjectSerializer::toQueryValue($sender_id, null);
        }
        // query params
        if ($template_id !== null) {
            $queryParams['template_id'] = ObjectSerializer::toQueryValue($template_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation smsPost
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $message Conteúdo de texto da mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Chat
     */
    public function smsPost($telephone, $message = null, $template_id = null)
    {
        list($response) = $this->smsPostWithHttpInfo($telephone, $message, $template_id);
        return $response;
    }

    /**
     * Operation smsPostWithHttpInfo
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $message Conteúdo de texto da mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Chat, HTTP status code, HTTP response headers (array of strings)
     */
    public function smsPostWithHttpInfo($telephone, $message = null, $template_id = null)
    {
        $returnType = '\Swagger\Client\Model\Chat';
        $request = $this->smsPostRequest($telephone, $message, $template_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Chat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smsPostAsync
     *
     * 
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $message Conteúdo de texto da mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smsPostAsync($telephone, $message = null, $template_id = null)
    {
        return $this->smsPostAsyncWithHttpInfo($telephone, $message, $template_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $message Conteúdo de texto da mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smsPostAsyncWithHttpInfo($telephone, $message = null, $template_id = null)
    {
        $returnType = '\Swagger\Client\Model\Chat';
        $request = $this->smsPostRequest($telephone, $message, $template_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smsPost'
     *
     * @param  string $telephone Número de telefone (formato auto-detectado) (required)
     * @param  string $message Conteúdo de texto da mensagem (optional)
     * @param  string $template_id Identificação do modelo de mensagem (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smsPostRequest($telephone, $message = null, $template_id = null)
    {
        // verify the required parameter 'telephone' is set
        if ($telephone === null || (is_array($telephone) && count($telephone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telephone when calling smsPost'
            );
        }

        $resourcePath = '/sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($telephone !== null) {
            $queryParams['telephone'] = ObjectSerializer::toQueryValue($telephone, null);
        }
        // query params
        if ($message !== null) {
            $queryParams['message'] = ObjectSerializer::toQueryValue($message, null);
        }
        // query params
        if ($template_id !== null) {
            $queryParams['template_id'] = ObjectSerializer::toQueryValue($template_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_secret');
        if ($apiKey !== null) {
            $queryParams['api_secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
