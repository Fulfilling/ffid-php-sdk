<?php
/**
 * Chat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API FFID
 *
 * Documentação de chamadas à API pública FFID.  Você pode encontrar mais sobre o tratamento dos dados no seu [dashboard](https://d.ffid.com.br). Para utilizar esta API é preciso obter uma chave e um segredo (`api_key`, `api_secret`).
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.32
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Chat Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Chat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'chat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'client_id' => 'string',
'customer_id' => 'string',
'account_manager' => 'string',
'channel' => 'string',
'pending_to_send' => 'int',
'pending_to_read' => 'int',
'interactions' => '\Swagger\Client\Model\Interaction[]',
'customer' => '\Swagger\Client\Model\Customer',
'device' => '\Swagger\Client\Model\Device',
'status' => 'string',
'reasons_to_close' => 'string[]',
'tags' => 'string[]',
'active' => 'int',
'last_message' => 'string',
'created_at' => 'string',
'updated_at' => 'string',
'messages' => '\Swagger\Client\Model\Message[]',
'total_messages' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'client_id' => null,
'customer_id' => null,
'account_manager' => null,
'channel' => null,
'pending_to_send' => null,
'pending_to_read' => null,
'interactions' => null,
'customer' => null,
'device' => null,
'status' => null,
'reasons_to_close' => null,
'tags' => null,
'active' => null,
'last_message' => null,
'created_at' => null,
'updated_at' => null,
'messages' => null,
'total_messages' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'client_id' => 'client_id',
'customer_id' => 'customer_id',
'account_manager' => 'account_manager',
'channel' => 'channel',
'pending_to_send' => 'pending_to_send',
'pending_to_read' => 'pending_to_read',
'interactions' => 'interactions',
'customer' => 'customer',
'device' => 'device',
'status' => 'status',
'reasons_to_close' => 'reasons_to_close',
'tags' => 'tags',
'active' => 'active',
'last_message' => 'last_message',
'created_at' => 'created_at',
'updated_at' => 'updated_at',
'messages' => 'messages',
'total_messages' => 'total_messages'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'client_id' => 'setClientId',
'customer_id' => 'setCustomerId',
'account_manager' => 'setAccountManager',
'channel' => 'setChannel',
'pending_to_send' => 'setPendingToSend',
'pending_to_read' => 'setPendingToRead',
'interactions' => 'setInteractions',
'customer' => 'setCustomer',
'device' => 'setDevice',
'status' => 'setStatus',
'reasons_to_close' => 'setReasonsToClose',
'tags' => 'setTags',
'active' => 'setActive',
'last_message' => 'setLastMessage',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'messages' => 'setMessages',
'total_messages' => 'setTotalMessages'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'client_id' => 'getClientId',
'customer_id' => 'getCustomerId',
'account_manager' => 'getAccountManager',
'channel' => 'getChannel',
'pending_to_send' => 'getPendingToSend',
'pending_to_read' => 'getPendingToRead',
'interactions' => 'getInteractions',
'customer' => 'getCustomer',
'device' => 'getDevice',
'status' => 'getStatus',
'reasons_to_close' => 'getReasonsToClose',
'tags' => 'getTags',
'active' => 'getActive',
'last_message' => 'getLastMessage',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'messages' => 'getMessages',
'total_messages' => 'getTotalMessages'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['account_manager'] = isset($data['account_manager']) ? $data['account_manager'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['pending_to_send'] = isset($data['pending_to_send']) ? $data['pending_to_send'] : null;
        $this->container['pending_to_read'] = isset($data['pending_to_read']) ? $data['pending_to_read'] : null;
        $this->container['interactions'] = isset($data['interactions']) ? $data['interactions'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['reasons_to_close'] = isset($data['reasons_to_close']) ? $data['reasons_to_close'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['last_message'] = isset($data['last_message']) ? $data['last_message'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['total_messages'] = isset($data['total_messages']) ? $data['total_messages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Identificação da conversa
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id Identificação do Cliente FFID
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets account_manager
     *
     * @return string
     */
    public function getAccountManager()
    {
        return $this->container['account_manager'];
    }

    /**
     * Sets account_manager
     *
     * @param string $account_manager Usuário a quem a Conversa está atribuída
     *
     * @return $this
     */
    public function setAccountManager($account_manager)
    {
        $this->container['account_manager'] = $account_manager;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets pending_to_send
     *
     * @return int
     */
    public function getPendingToSend()
    {
        return $this->container['pending_to_send'];
    }

    /**
     * Sets pending_to_send
     *
     * @param int $pending_to_send Número de mensagens com envio agendado pendente
     *
     * @return $this
     */
    public function setPendingToSend($pending_to_send)
    {
        $this->container['pending_to_send'] = $pending_to_send;

        return $this;
    }

    /**
     * Gets pending_to_read
     *
     * @return int
     */
    public function getPendingToRead()
    {
        return $this->container['pending_to_read'];
    }

    /**
     * Sets pending_to_read
     *
     * @param int $pending_to_read Número de mensagens enviadas e ainda não lidas pelo Consumidor
     *
     * @return $this
     */
    public function setPendingToRead($pending_to_read)
    {
        $this->container['pending_to_read'] = $pending_to_read;

        return $this;
    }

    /**
     * Gets interactions
     *
     * @return \Swagger\Client\Model\Interaction[]
     */
    public function getInteractions()
    {
        return $this->container['interactions'];
    }

    /**
     * Sets interactions
     *
     * @param \Swagger\Client\Model\Interaction[] $interactions Interações
     *
     * @return $this
     */
    public function setInteractions($interactions)
    {
        $this->container['interactions'] = $interactions;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Swagger\Client\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Swagger\Client\Model\Customer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets device
     *
     * @return \Swagger\Client\Model\Device
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \Swagger\Client\Model\Device $device device
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reasons_to_close
     *
     * @return string[]
     */
    public function getReasonsToClose()
    {
        return $this->container['reasons_to_close'];
    }

    /**
     * Sets reasons_to_close
     *
     * @param string[] $reasons_to_close Lista de Motivos para encerramento da conversa
     *
     * @return $this
     */
    public function setReasonsToClose($reasons_to_close)
    {
        $this->container['reasons_to_close'] = $reasons_to_close;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags Lista de Etiquetas atribuídas à Conversa
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets active
     *
     * @return int
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param int $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets last_message
     *
     * @return string
     */
    public function getLastMessage()
    {
        return $this->container['last_message'];
    }

    /**
     * Sets last_message
     *
     * @param string $last_message Última mensagem recebida do Consumidor
     *
     * @return $this
     */
    public function setLastMessage($last_message)
    {
        $this->container['last_message'] = $last_message;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Data de criação da Conversa
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at Data de último envio ou recebimento de mensagem
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \Swagger\Client\Model\Message[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \Swagger\Client\Model\Message[] $messages messages
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets total_messages
     *
     * @return int
     */
    public function getTotalMessages()
    {
        return $this->container['total_messages'];
    }

    /**
     * Sets total_messages
     *
     * @param int $total_messages Total de mensagens nesta Conversa
     *
     * @return $this
     */
    public function setTotalMessages($total_messages)
    {
        $this->container['total_messages'] = $total_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
